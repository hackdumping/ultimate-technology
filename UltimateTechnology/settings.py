"""
Django settings for UltimateTechnology project.

Generated by 'django-admin startproject' using Django 4.2.18.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from email.policy import default
from pathlib import Path
import dj_database_url
import environ
from dotenv import load_dotenv, find_dotenv

from django.conf.global_settings import MEDIA_URL, DEBUG, DEFAULT_FILE_STORAGE

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#env = environ.Env()
#environ.Env.read_env()
load_dotenv(find_dotenv())


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
SHOW_CUSTOM_ERRORS = True

#ALLOWED_HOSTS = ['4db1350b6a7c90.lhr.life', '127.0.0.1', 'localhost']
ALLOWED_HOSTS = ['*']
"""CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://4db1350b6a7c90.lhr.life',
]"""

import time
META_VERSION = int(time.time())  # Timestamp actuel

# Application definition
import whitenoise
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',
    'vente_pc',
    'django_resized',
    'cloudinary_storage',
    'cloudinary'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'vente_pc.middleware.ShowErrorsInDevelopmentMiddleware',
    'vente_pc.middleware.NoCacheSocialMiddleware',
]

DJANGORESIZED_DEFAULTS = {
    'size': [1920, 1080],  # Résolution max [largeur, hauteur]
    'scale': 0.75,         # Réduction de qualité
    'quality': 80,         # Qualité JPEG (0-100)
    'keep_meta': False,    # Supprime les metadata EXIF
    'force_format': 'WEBP', # Convertit en WebP automatiquement
}

ROOT_URLCONF = 'UltimateTechnology.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'UltimateTechnology.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases


"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
"""
DATABASES = {
    'default':{
        'ENGINE' : 'django.db.backends.postgresql',
        'NAME' : os.environ.get('DB_NAME'),
        'USER' : os.environ.get('DB_USER'),
        'PASSWORD' : os.environ.get('DB_PASSWORD'),
        'HOST' : os.environ.get('DB_HOST'),
        'PORT' : os.environ.get('DB_PORT'),
        'OPTIONS': {
            'sslmode': 'require',
        }
    }
}
"""
DATABASES = {
    'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
}

DATABASES = {
    'default': dj_database_url.parse(
        os.environ.get('DATABASE_URL'),
        conn_max_age=600,
        ssl_require=True
    )
}
"""

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fr-FR'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


# connexion cloudinary
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': 'dxcbksigt',
    'API_KEY': '529168959236142',
    'API_SECRET': 'd0pkAYk8Ba-BaLM61RRP56MjLqk',
    'QUALITY': 'auto:good',
    'FORMAT': 'webp',
    'SECURE': True,
    'MEDIA_TAG': 'media',
}
import cloudinary
cloudinary.config(
    cloud_name = 'dxcbksigt',
    api_key = '529168959236142',
    api_secret = 'd0pkAYk8Ba-BaLM61RRP56MjLqk',
    secure = True
)

#Definir cloudinary comme fichier de stockage par defaut
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage',

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_URL = '/media/'
#MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

NUMERO = "+237658562221"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuration email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'hackdumping@gmail.com'
EMAIL_HOST_PASSWORD = 'djvrbzkxcaohpcxh'
DEFAULT_FROM_EMAIL = 'hackdumping@mail.com'
